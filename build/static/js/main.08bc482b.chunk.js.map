{"version":3,"sources":["loading.gif","serviceWorker.js","Recipes.js","loading.js","Foody.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Recipes","title","calories","image","ingredients","dietLabels","className","map","ingredient","index","key","text","src","alt","Loading","loading","Component","App","useState","search","setSearch","recipes","setRecipes","query","setQuery","setLoading","useEffect","getRecipes","a","fetch","response","json","data","hits","onSubmit","e","preventDefault","type","value","onChange","target","recipe","label","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,qC,0ICYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kCCGSC,G,KAnBD,SAAC,GAAiD,IAAhDC,EAA+C,EAA/CA,MAAMC,EAAyC,EAAzCA,SAASC,EAAgC,EAAhCA,MAAMC,EAA0B,EAA1BA,YAAYC,EAAc,EAAdA,WACjD,OACC,yBAAKC,UAAU,WACd,wBAAIA,UAAU,SAASL,GACvB,4BACEG,EAAYG,IAAI,SAACC,EAAYC,GAAb,OAChB,wBAAIC,IAAKD,GAAQD,EAAWG,SAG9B,uBAAGL,UAAU,OAAb,WAA6BJ,GAC7B,uBAAGI,UAAU,QAAb,aAAgCD,EAAhC,KACA,yBAAKO,IAAKT,EAAOU,IAAI,Q,sDCFRC,E,iLANd,OACC,yBAAKF,IAAKG,IAASF,IAAI,gB,GAHHG,aCsEPC,EArEL,WAEV,IAFc,EAKUC,mBAAS,IALnB,mBAKRC,EALQ,KAKDC,EALC,OAMYF,mBAAS,IANrB,mBAMRG,EANQ,KAMAC,EANA,OAOQJ,mBAAS,WAPjB,mBAORK,EAPQ,KAOFC,EAPE,OAQYN,oBAAS,GARrB,mBAQRH,EARQ,KAQAU,EARA,KAUdC,oBAAW,WACXC,KACE,CAACJ,IAEH,IAAMI,EAAU,sCAAC,8BAAAC,EAAA,4DAChBH,GAAYV,GADI,SAEKc,MAAM,mCAAD,OAAoCN,EAApC,mBAdd,qBAcc,oBAbb,wBAWG,cAEVO,EAFU,gBAGCA,EAASC,OAHV,OAGVC,EAHU,OAIhBV,EAAWU,EAAKC,MAEZD,GACHP,GAAW,GAPI,yCAAD,qDAsBhB,OACC,kBAAC,WAAD,KAEEV,EAAU,gCAAQ,kBAAC,EAAD,MAAR,KACT,6BACC,4BAAQT,UAAU,UAClB,wBAAIA,UAAU,QAAd,gBACA,0BAAM4B,SAfK,SAAAC,GACfA,EAAEC,iBACFZ,EAASL,GACTC,EAAU,KAYoBd,UAAU,eACrC,2BAAOA,UAAU,aAAa+B,KAAK,OAAMC,MAAOnB,EAAQoB,SAnBzC,SAAAJ,GAClBf,EAAUe,EAAEK,OAAOF,UAmBhB,4BAAQhC,UAAU,gBAAe+B,KAAK,UAAtC,YAIC,yBAAK/B,UAAU,WACde,EAAQd,IAAI,SAACkC,EAAQhC,GAAT,OACd,kBAAC,EAAD,CACAR,MAAOwC,EAAOA,OAAOC,MACrBhC,IAAKD,EACJP,SAAUuC,EAAOA,OAAOvC,SACzBC,MAAOsC,EAAOA,OAAOtC,MACrBC,YAAaqC,EAAOA,OAAOrC,YAC3BC,WAAYoC,EAAOA,OAAOpC,mBCpD9BsC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SJwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.08bc482b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.1d7626e6.gif\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport \"./my styles/App.css\"\nconst Recipes=({title,calories,image,ingredients,dietLabels})=>{\nreturn(\n\t<div className=\"details\">\n\t\t<h1 className=\"title\">{title}</h1>\n\t\t<ol>\n\t\t\t{ingredients.map((ingredient, index)=>(\n\t\t\t\t<li key={index}>{ingredient.text}</li>\n\t\t\t\t))}\n\t\t</ol>\n\t\t<p className=\"cal\">calorie:{ calories}</p>\n\t\t<p className=\"diet\">dietLabel:{ dietLabels} </p>\n\t\t<img src={image} alt=\"\"/>\n\n\t</div>\n\n\t)\n\n\n}\nexport default Recipes;","import React,{Component} from 'react'\nimport loading from'./loading.gif'\n\nclass Loading extends Component{\nrender(){\n\treturn(\n\t\t<img src={loading} alt=\"loading\"/>\n\t\t)\n}\n}\n\nexport default Loading;","import React,{useEffect, useState, Fragment} from 'react'\nimport Recipes from './Recipes'\nimport \"./my styles/App.css\"\nimport Loading from './loading'\nconst App=()=>{\n\nconst APP_ID=\"process.env.APP_ID\";\nconst APP_key=\"process.env.APP_key\";\n\nconst[search,setSearch]=useState(\"\");\nconst[recipes,setRecipes]=useState([]);\nconst[query,setQuery]=useState('chicken')\nconst[loading,setLoading]=useState(false)\n\nuseEffect( () =>{\ngetRecipes()\n},[query]);\n\nconst getRecipes=async ()=>{\n\tsetLoading(!loading)\n\tconst response=await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_key}`)\n\tconst data=await response.json()\n\tsetRecipes(data.hits);\n\n\tif (data) {\n\t\tsetLoading(false)\n\t}\n\t\n}\nconst updateSearch=e=>{\n\tsetSearch(e.target.value)\n}\nconst getSearch=e=>{\n\te.preventDefault();\n\tsetQuery(search);\n\tsetSearch(\"\");\n};\n\n\n\nreturn(\n\t<Fragment>\n\t\t{\n\t\t\tloading ? <center><Loading /> </center>: (\n\t\t\t\t<div>\n\t\t\t  <header className=\"search\">\n\t\t\t  <h1 className=\"logo\">FOODY-SEARCH</h1>\n\t\t\t  <form onSubmit={getSearch}className=\"search-form\">\n\t\t\t\t<input className=\"search-bar\" type=\"text\"value={search} onChange={updateSearch}/>\n\t\t\t\t<button className=\"search-button\"type=\"submit\">search</button>\n\t\t\t  </form>\n\t\t\t  </header>\n\n\t\t\t  <div className=\"recipes\">\n\t\t\t  {recipes.map((recipe, index)=>(\n\t\t\t\t<Recipes\n\t\t\t\ttitle={recipe.recipe.label}\n\t\t\t\tkey={index} \n\t\t\t \tcalories={recipe.recipe.calories}\n\t\t\t\timage={recipe.recipe.image}\n\t\t\t\tingredients={recipe.recipe.ingredients}\n\t\t\t\tdietLabels={recipe.recipe.dietLabels}\n\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t  </div>\n\t\t\t</div>\n\t\t\t)\n\t\t}\n\t</Fragment>\n )\n}\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport App from './Foody'\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}